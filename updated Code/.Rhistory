r=100
s=5
XD <- 1:1000
helpfunction <- function(XD){
f = sample(1:r, s)
g = sample(c(-1,1), s, replace = T)
for(l in 1:s){
X_[f[l],] <- X_[f[l],] + XD * g[l]}
}
helpfunction(XD)
setwd("C:/Users/teschke/Promotion/Research/merging_CLS_paper/special_issue_CEN/updated Code")
load("C:/Users/teschke/Promotion/Research/merging_CLS_paper/special_issue_CEN/Data/Szen2w_20k.RData")
X <- cbind(Szen2w_20k[[1]]$x)
ncol(X)
X <- cbind(Szen2w_20k[[1]]$x, Szen2w_20k[[1]]$y)
ncol(X)
p = ncol(X)
n = nrow(X)
p
n
X <- t(X)
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
epsilon = 0.2
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
s = round(ceiling(log(n)/epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s)
g = sample(c(-1,1), s, replace = T)
for(l in 1:s){
X_[f[l],] <- X_[f[l],] + X[d,] * g[l]}
print(d)
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
getCLS = function(XY){
# If number of rows is less than number of columns,
# need to transpose combination matrix, as this switches the roles of obs and variables,
if(nrow(XY) < ncol(XY)) C = t(XY) else C = XY
decomp = qr.Q(qr(C))
CLS <- c()
# to save the matrix multiplication with Q we calculate only the scalar product of the
# corresponding rows.
for(i in 1:(nrow(decomp)-1)){
CLS[i] <- decomp[i, ] %*% decomp[nrow(decomp), ]
}
return(CLS)
}
# Inv_or_MP: function to get inverse or pseudoinverse
#
# Input: R - Matrix
#
# Outout: Inverse or Pseudoinverse
Inv_or_MP <- function(R){
tryCatch({
solve(R)
},
error = function(e){
MASS::ginv(R)
}
)
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- c()
for(i in 1:(p-1)){
cls[i] <- Om[i, ] %*% Om[p,]
}
return(Om_)
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- c()
for(i in 1:(p-1)){
cls[i] <- Om[i, ] %*% Om[p,]
}
cls
cls[1:10]
rank(cls)[1:10]
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
s = round(ceiling(log(n)/epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
X
ncol(X)
rm(Szen2w_20k)
gc()
X
dim(X)
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
s = round(ceiling(log(n)/epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
apply(X, 2, helpfundtion)
helpfunction <- function(XD){
f = sample(1:r, s)
g = sample(c(-1,1), s, replace = T)
for(l in 1:s){
X_[f[l],] <- X_[f[l],] + XD * g[l]}
}
?apply
apply(X, 1, helpfunction)
s
log(120)
log(120)/0.2^2
dim(X)
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
r
n
r
r = round((ceiling(n * log(n))) / (epsilon^2))
r
epsilon = 0.2
epsilon = 0.5
r = round((ceiling(n * log(n))) / (epsilon^2))
r
epsilon = 0.8
r = round((ceiling(n * log(n))) / (epsilon^2))
r
epsilon = 2
r = round((ceiling(n * log(n))) / (epsilon^2))
r
n
dim(X)
x <- t(X)
X <- t(X)
rm(x)
gc()
dim(X)
X <- t(X)
gc()
dim(X)
epsilon = 0.5
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
r
s
X_ <- apply(X, 1, function(row) {
f = sample(1:r, s, replace = TRUE)        # Zufällige Zeilenindizes
g = sample(c(-1, 1), s, replace = TRUE)   # Zufällige Vorzeichen
colSums(outer(f, 1:n, function(i, j) g * row[j])) # Aktualisierung
})
dim(X_)
r
n
-1 * 1:5
d=1
X[d,]
X_[c(1,3), ] + X[d, ]
X_ <- matrix(0, nrow = r, ncol = n)
outer(X_[c(1,3), ], X[d, ], "+")
X_ <- outer(X_[c(1,3), ], X[d, ], "+")
X_[1:5,1:5]
dim(X_)
X_ <- matrix(0, nrow = r, ncol = n)
d
f = c(1,3,5)
X_[f,]
X_[f,] + X[d,]
X_ <- matrix(0, nrow = r, ncol = n)
dim(X_)
dim(X[1,])
dim(X)
X_[f, ]
X_[f, ] + X[1, ]
outer(X_[f, ], X[1, ], "+")
S <- outer(X_[f, ], X[1, ], "+")
dom(S)
dim(S)
add_matrix <- matrix(0, nrow = r, ncol = n)
add_matrix[1:4,1:4]
d
f
add_matrix[f, ] <- X[d, ]
add_matrix[1:6,1:6]
X[d,6]
X[d,1:6]
dim8X
dim(X)
# Beispiel-Daten
r <- 5   # Anzahl der Zeilen in der Matrix
n <- 4   # Anzahl der Spalten in der Matrix
X_ <- matrix(0, nrow = r, ncol = n)  # Initialisiere Matrix
row_to_add <- c(1, 2, 3, 4)         # Vektor, der hinzugefügt werden soll
f <- c(1, 3, 4)                     # Zeilenindizes, zu denen addiert werden soll
X_
add_matrix <- outer(1:r, f, function(i, j) i == j)  #
add_matrix
add_matrix <- add_matrix %*% row_to_add
row_to_add <- c(1, 2, 3, 4)
r <- 5   # Anzahl der Zeilen in der Matrix
n <- 4   # Anzahl der Spalten in der Matrix
X_ <- matrix(0, nrow = r, ncol = n)
X_
X_[1, ] + row_to_add
X_[f, ] + row_to_add
r <- 5   # Anzahl der Zeilen in der Matrix
n <- 4   # Anzahl der Spalten in der Matrix
X_ <- matrix(0, nrow = r, ncol = n)  #
add_matrix <- X_
add_matrix[f,] <- row_to_add
add_matrix
r <- 5   # Anzahl der Zeilen in der Matrix
n <- 4   # Anzahl der Spalten in der Matrix
X_ <- matrix(0, nrow = r, ncol = n)  #
add_matrix <- X_
?outer
apply(X_[f, ], 1, function(x){x+ row_to_add})
f
f %o% -1
f %o% c(-1,1,1)
g
dim(X)
X <- t(X)
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
n
p
r
s
for(d in 1:p){
f = sample(1:r, s, replace = TRUE)
g = sample(c(-1, 1), s, replace = TRUE)
X_[f, ] <- X_[f, ] + X[d, ] %o% g
print(d)
}
X[1, ]
g
1:2 %o% g
1:2 %o% c(-1,-1)
X[1, ] %o% c(-1,-1)
d
g = sample(c(-1, 1), s, replace = TRUE)
X[d, ]
X[d, ] %o% g
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s, replace = TRUE)
g = sample(c(-1, 1), s, replace = TRUE)
X_[f, ] <- X_[f, ] + (X[d, ] %o% g)
print(d)
}
dim((X[d, ] %o% g))
dim(X_[f, ])
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s, replace = TRUE)
g = sample(c(-1, 1), s, replace = TRUE)
X_[f, ] <- X_[f, ] + t(X[d, ] %o% g)
print(d)
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- c()
for(i in 1:(p-1)){
cls[i] <- Om[i, ] %*% Om[p,]
}
dim(X)
sketching <- function(X, epsilon = 0.5){
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
s = round(ceiling(log(n)/epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s)
g = sample(c(-1,1), s, replace = T)
for(l in 1:s){
X_[f[l],] <- X_[f[l],] + X[d,] * g[l]}
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- c()
for(i in 1:(p-1)){
cls[i] <- Om[i, ] %*% Om[p,]
}
return(cls)
}
sketching(X)
dim(X)
X <- t(X)
gc()
sketching <- function(X, epsilon = 0.5){
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
s = round(ceiling(log(n)/epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s)
g = sample(c(-1,1), s, replace = T)
for(l in 1:s){
X_[f[l],] <- X_[f[l],] + X[d,] * g[l]}
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- c()
for(i in 1:(p-1)){
cls[i] <- Om[i, ] %*% Om[p,]
}
return(cls)
}
print(d)
sketching(X)
dim(X)
sketching2(X)
sketching2 <- function(X, epsilon = 0.5){
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s, replace = TRUE)
g = sample(c(-1, 1), s, replace = TRUE)
X_[f, ] <- X_[f, ] + t(X[d, ] %o% g)
print(d)
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- Om[1:(p-1), ] %*% Om[p, ]
}
sketching2(X)
sketching <- function(X, epsilon = 0.5){
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n*log(n)))/(epsilon^2)) # Cohen
s = round(ceiling(log(n)/epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
for(d in 1:p){
f = sample(1:r, s)
g = sample(c(-1,1), s, replace = T)
for(l in 1:s){
X_[f[l],] <- X_[f[l],] + X[d,] * g[l]}
print(d)
}
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
print('R_inv')
Om <- X %*% R_inv
cls <- c()
for(i in 1:(p-1)){
cls[i] <- Om[i, ] %*% Om[p,]
}
return(cls)
}
sketching(X)
microbenchmark::microbenchmark(sketching(X), times = 10)
microbenchmark::microbenchmark(sketching2(X), times = 10)
helpfunction <- function(x){
f = sample(1:r, s, replace = TRUE)
g = sample(c(-1, 1), s, replace = TRUE)
X_[f, ] <- X_[f, ] + t(x %o% g)
}
dim(X)
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
X_ <- apply(X, 1, helpfunction)
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
Om <- X %*% R_inv
gc()
dim(X)
X <- X
X <- t(X)
dim(X)
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
X_ %>% dim()
library('tidyverse')
X_ %>% dim()
dim(X)
X_ <- apply(X, 1, helpfunction)
dim(X_)
length(f)
length(s)
R <- qr.R(qr(X_)) # R from QR decomp.
helpfunction <- function(x){
f = sample(1:r, s, replace = TRUE)
g = sample(c(-1, 1), s, replace = TRUE)
X_[f, ] <- X_[f, ] + t(x %o% g)
return(X_)
}
sketching_faster <- function(X, epsilon = 0.5){
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
X_ <- apply(X, 1, helpfunction)
R <- qr.R(qr(X_)) # R from QR decomp.
R_inv <- Inv_or_MP(R)
Om <- X %*% R_inv
cls <- Om[1:(p-1), ] %*% Om[p, ]
return(cls)
}
dim(X)
x <- t(X)
X <- t(X)
rm(x)
gc(9)
gc()
p = ncol(X)
n = nrow(X)
X <- t(X)
r = round((ceiling(n * log(n))) / (epsilon^2)) # Cohen
s = round(ceiling(log(n) / epsilon^2))
X_ <- matrix(0, nrow = r, ncol = n)
X_ <- apply(X, 1, helpfunction)
dim(X_)
